plugins {
    id 'fabric-loom' version '1.5-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    mavenCentral()

    maven { url = "https://mvn.devos.one/snapshots/" }
    maven { url = 'https://maven.parchmentmc.org' }
    maven { url = "https://modmaven.dev" }
}

loom {
    accessWidenerPath = file("src/main/resources/enderio.accesswidener")
}

def subsets = [
        'conduits',
        'machines',
        'armory'
]

sourceSets {
    fabric {
        compileClasspath += sourceSets.main.compileClasspath
    }
    api {
        compileClasspath += sourceSets.main.compileClasspath
        compileClasspath += sourceSets.fabric.output
    }
    core {
        compileClasspath += sourceSets.main.compileClasspath
        compileClasspath += sourceSets.api.compileClasspath
        compileClasspath += sourceSets.api.output
    }
    main {
        compileClasspath += sourceSets.api.output
        compileClasspath += sourceSets.core.output
        compileClasspath += sourceSets.fabric.output
        ext.refMap = "mixins.enderio.refmap.json"
        resources { srcDir 'src/generated/resources' }
    }
}

for (String subset : subsets) {
    sourceSets.create(subset) {
        compileClasspath += sourceSets.api.compileClasspath
        compileClasspath += sourceSets.core.compileClasspath
        compileClasspath += sourceSets.main.compileClasspath
        resources { srcDir "src/$subset/resources" }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
    }

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    include(modImplementation("com.tterrag.registrate_fabric:Registrate:${project.registrate_version}")) {
        exclude group: 'com.github.llamalad7.mixinextras', module: 'mixinextras-fabric'
    }
    include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.2.2")))

    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}")
    modCompileOnlyApi("mezz.jei:jei-${minecraft_version}-fabric-api:${jei_version}")
    modRuntimeOnly("mezz.jei:jei-${minecraft_version}-common:${jei_version}")
    modRuntimeOnly("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    withSourcesJar()

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.base.archivesName.get()}"}
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    repositories {}
}
